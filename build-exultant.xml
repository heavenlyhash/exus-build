<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ant-project>
<project name="ExultantBuildCommon" basedir=".">
	<description>
		This set of config files teaches Ant how to have reasonable defaults for a bunch of critical ideas in any build process that's even remotely normal.
		In other words, this is me making boilerplate disappear that was showing up again and again in my build.xml files, so that what's left is concise and actually related to business.
		
		While most of the ideas in these configs are not language specific, they are generally a bit oriented around the assumptions of higher level languages and not too much platform specificness.
		
		Also, git is assumed.
	</description>
	
	
	<property file="build.properties"/>
	
	
	<property name="src"   value="src"/>
	<property name="lib"   value="lib"/>
	<property name="dat"   value="dat"/>
	<property name="inc"   value="inc"/>
	<property name="res"   value="res"/>
	<property name="pre"   value="pre"/>
	<property name="build" value="bld"/>
	<property name="dist"  value="dist"/>
	<property name="doc"   value="docs"/>
	
	
	<!-- importing language-specific extensions.  comment out as many or as few of these as you like. -->
	<import file="build-exultant-java.xml"/>
	
	
	<target name="exusInit" depends="exusInitId">
		<mkdir dir="${src}"/>
		<mkdir dir="${src}/main"/>
		<mkdir dir="${src}/test"/>
		<mkdir dir="${lib}"/>		<!-- things required for compilation.  may or may not end up in the tar, depending on the type of project.	-->
		<mkdir dir="${dat}"/>		<!-- actually, tends not to be used except at runtime.								-->
		<mkdir dir="${inc}"/>		<!-- place for stuff that gets rolled into the tar								-->
		<mkdir dir="${res}"/>		<!-- place for stuff that gets rolled into the jar								-->
		<mkdir dir="${pre}"/>		<!-- place for stuff with special behaviors; typically some kind of template file or the like			-->
		<!-- uncomment these if your project has platform specific components that should be shipped
		<mkdir dir="${inc}/universal"/>
		<mkdir dir="${inc}/linux"/>
		<mkdir dir="${inc}/linux32"/>
		<mkdir dir="${inc}/linux64"/>
		<mkdir dir="${inc}/win"/>
		<mkdir dir="${inc}/win32"/>
		<mkdir dir="${inc}/win64"/>
		<mkdir dir="${inc}/macosx"/>
		-->
		<mkdir dir="${doc}"/>
		<mkdir dir="${doc}/api"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${build}/main"/>
		<mkdir dir="${build}/test"/>
		<mkdir dir="${dist}"/>
	</target>
	
	
	<target name="exusInitId">
		<!-- Set up timestamps for later reference wherever they're needed. -->
		<tstamp>
			<format property="builddate" pattern="yyyy/MM/dd HH:mm:ss Z" timezone="GMT+0"/>		<!-- this is a date in a standard ISO format -->
			<format property="timemark"  pattern="yyyyMMddHHmmssSSS"     timezone="GMT+0"/>		<!-- this is the date as just a string of numbers (easier to use in a filename). -->
		</tstamp>
		
		<!-- Take a look at git history to find a unique string that can be used to label this build.
		     Note that it's not really possible to do this well if there are dirty/uncommitted changes going on. -->
		<exec executable="git" outputproperty="git-version">
			<arg value="log"/>
			<arg value="--pretty=format:%h"/>
			<arg value="-n 1"/>
		</exec>
		
		<!-- Declare a version name.  By default this refers to the git commit hash.
		     Override this on the command line with `-Dversion=[releasenumber]` if you're doing a release build or something else with a special name. -->
		<property name="version" value="snapshot-${git-version}" />
		
		<!-- Echo some stuff, just for your sanity. -->
		<echo>Build date:        ${builddate}</echo>
		<echo>Git commit hash:   ${git-version}</echo>
		<echo>Version:           ${version}</echo>
	</target>
	
	
	<macrodef name="exusIncArch">
		<!-- copy "inc/universal", then "inc/@{os}", then "inc/@{arch}" into "dist/@{arch} -->
		<attribute name="os"/><!-- i.e., "linux" -->
		<attribute name="arch"/><!-- i.e., "linux64" -->
		<!-- for mac: fuck it, just set the same string twice. -->
		
		<sequential>
			<mkdir dir="${dist}/@{arch}"/>
			<mkdir dir="${inc}/@{arch}"/>
			<mkdir dir="${inc}/@{os}"/>
			
			<copy todir="${dist}/@{arch}">
				<fileset dir="${inc}/universal"/>
			</copy>
			
			<!--<if><equals arg1="@{os}" arg2=""/><else>-->
			<copy todir="${dist}/@{arch}">
				<fileset dir="${inc}/@{os}"/>
			</copy>
			<!--</else></if>-->
			
			<copy todir="${dist}/@{arch}">
				<fileset dir="${inc}/@{arch}"/>
			</copy>
		</sequential>
	</macrodef>
	
	
	<macrodef name="exusInc">
		<sequential>
			<copy todir="${dist}">
				<fileset dir="${inc}"/>
			</copy>
		</sequential>
	</macrodef>	
</project>
