<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ant-project>
<project name="ExultantBuildCommon" basedir=".">
	<description>
		This set of config files teaches Ant how to have reasonable defaults for a bunch of critical ideas in any build process that's even remotely normal.
		In other words, this is me making boilerplate disappear that was showing up again and again in my build.xml files, so that what's left is concise and actually related to business.
		
		While most of the ideas in these configs are not language specific, they are generally a bit oriented around the assumptions of higher level languages and not too much platform specificness.
		
		Also, git is assumed.
	</description>
	
	<property environment="env"/>
	
	<property file="build.properties"/>
	
	
	<property name="src"   value="src"/>
	<property name="lib"   value="lib"/>
	<property name="dat"   value="dat"/>
	<property name="inc"   value="${src}/inc"/>
	<property name="res"   value="${src}/res"/>
	<property name="pre"   value="${src}/pre"/>
	<property name="target" value="target"/>
	<property name="build" value="${target}"/>
	<property name="dist"  value="${target}/dist"/>
	<property name="doc"   value="doc"/>
	
	
	<target name="exusInit" depends="exusInitId,exusInitLayout">
	</target>
	
	
	<target name="exusInitLayout">
		<!-- make a normal directory structure. -->
		<mkdir dir="${src}"/>
		<mkdir dir="${src}/main"/>	<!-- if you wanna do the maven-esqe language directories under this, knock yourself out.  i'm indifferent.	-->
		<mkdir dir="${src}/test-fixtures"/>
		<mkdir dir="${src}/test-unit"/>
		<mkdir dir="${src}/test-integration"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${lib}"/>		<!-- things required for compilation.  may or may not end up in the tar, depending on the type of project.	-->
		<mkdir dir="${doc}"/>
		<mkdir dir="${doc}/api"/>
		<mkdir dir="${dist}"/>
	</target>
	<target name="exusInitLayoutAll" depends="exusInitLayout">
		<mkdir dir="${res}"/>		<!-- deprecated: recommend using a subdir of src. --><!-- place for stuff that gets rolled into the jar (or whatever single/executable file)				-->
		<mkdir dir="${inc}"/>		<!-- deprecated: recommend using a subdir of src. --><!-- place for stuff that gets rolled into the tar (files that are accessible directly on the fs after install)	-->
		<mkdir dir="${pre}"/>		<!-- deprecated: recommend using a subdir of src. --><!-- place for stuff with special behaviors; typically some kind of template file or the like.  not included in final artifact.	-->
	</target>
	<target name="exusInitLayoutPlatforms" depends="exusInitLayout">
		<!-- the 'exusIncArch' macro may be helpful for use if you wish to ship platform specific components alongside your product (i.e. inc-style in the tar; it doesn't help with res-style). -->
		<mkdir dir="${inc}/universal"/>	<!-- files for any and all platforms							-->
		<mkdir dir="${inc}/linux"/>	<!-- files for linux (both 32- and 64-bit) platforms					-->
		<mkdir dir="${inc}/linux32"/>	<!-- files for linux (32bit) platform							-->
		<mkdir dir="${inc}/linux64"/>	<!-- files for linux (64bit) platform							-->
		<mkdir dir="${inc}/win"/>	<!-- files for windows (both 32- and 64-bit) platforms					-->
		<mkdir dir="${inc}/win32"/>	<!-- files for windows (32bit) platform							-->
		<mkdir dir="${inc}/win64"/>	<!-- files for windows (64bit) platform							-->
		<mkdir dir="${inc}/macosx"/>	<!-- files for mac platform								-->
	</target>
	
	
	<target name="exusInitId">
		<!-- Set up timestamps for later reference wherever they're needed. -->
		<tstamp>
			<format property="builddate" pattern="yyyy/MM/dd HH:mm:ss Z" timezone="GMT+0"/>		<!-- this is a date in a standard ISO format -->
			<format property="timemark"  pattern="yyyyMMddHHmmssSSS"     timezone="GMT+0"/>		<!-- this is the date as just a string of numbers (easier to use in a filename). -->
		</tstamp>
		
		<!-- Take a look at git history to find a unique string that can be used to label this build.
		     Note that it's not really possible to do this well if there are dirty/uncommitted changes going on. -->
		<exec executable="git" outputproperty="git-version">
			<arg value="log"/>
			<arg value="--pretty=format:%h"/>
			<arg value="-n 1"/>
		</exec>
		
		<!-- Declare a version name.  By default this refers to the git commit hash.
		     Override this on the command line with `-Dversion=[releasenumber]` if you're doing a release build or something else with a special name. -->
		<property name="version" value="snapshot-${git-version}" />
		
		<!-- Echo some stuff, just for your sanity. -->
		<echo>Build date:        ${builddate}</echo>
		<echo>Git commit hash:   ${git-version}</echo>
		<echo>Version:           ${version}</echo>
	</target>
	
	
	<macrodef name="exusIncArch">
		<!-- copy "inc/universal", then "inc/@{os}", then "inc/@{arch}" into "dist/@{arch} -->
		<attribute name="os"/><!-- i.e., "linux" -->
		<attribute name="arch"/><!-- i.e., "linux64" -->
		<!-- for mac: fuck it, just set the same string twice. -->
		
		<sequential>
			<mkdir dir="${dist}/@{arch}"/>
			<mkdir dir="${inc}/@{arch}"/>
			<mkdir dir="${inc}/@{os}"/>
			
			<copy todir="${dist}/@{arch}">
				<fileset dir="${inc}/universal"/>
			</copy>
			
			<!--<if><equals arg1="@{os}" arg2=""/><else>-->
			<copy todir="${dist}/@{arch}">
				<fileset dir="${inc}/@{os}"/>
			</copy>
			<!--</else></if>-->
			
			<copy todir="${dist}/@{arch}">
				<fileset dir="${inc}/@{arch}"/>
			</copy>
		</sequential>
	</macrodef>
	
	
	<macrodef name="exusInc">
		<sequential>
			<copy todir="${dist}">
				<fileset dir="${inc}"/>
			</copy>
		</sequential>
	</macrodef>
	
	
	<macrodef name="exusPack">
		<!--
		    Essentially, make a zip that has a metainfo file in it.  This particular format is derived from the java/jar one, but it works equally well for python zipbangs, which is neat.
		    This macro adds timestamps of the build and version names and git commit info to the metainfo in a standard way.  Other than that...
		    Usage is pretty much exactly the same as the normal jar/zip ant tasks.  "manifest" tags can be nested as for the ant jar task.
		-->
		<attribute name="destfile" />
		<element name="innards" implicit="yes" optional="yes" />
		<sequential>
			<jar destfile="@{destfile}">	<!-- note that supporting "basedir" is not an option; you must use other kinds of fileset.  (there's no way at the time of writing to make a macrodef attribute optional, and defaults can't be used to simulate optionalness, because having basedir on a jar task specified to anything at all, even an empty string, causes different behavior than actually not providing it. -->
				<manifest>
					<attribute name="Implementation-Version" value="${version}"/>
					<attribute name="Git-Commit" value="${git-version}"/>
					<attribute name="Build-Date" value="${builddate}"/>
				</manifest>
				<innards />	<!-- note that this can contain both fileset stuff and more manifest tags.  if there are more manifest tags, all of the attributes just keep accumulating, which works perfectly fine. -->
			</jar>
		</sequential>
	</macrodef>
	
	
	<macrodef name="validate-property">
		<attribute name="name"/>
		<sequential>
			<fail unless="@{name}" message="property '@{name}' is a required property" />
		</sequential>
	</macrodef>
</project>
